<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:interceptors>
	        <mvc:interceptor> 
	           <mvc:mapping path="/admin_main"/>
	           <!-- 여러개 컨트롤러 추가 가능 -->

	                <mvc:mapping path="/hmk/"/>

	           <!-- 로그인체크 인터셉터 클래스 -->
	           <bean class="com.spring.interceptor.Interceptor"/>
	        </mvc:interceptor>
	    </mvc:interceptors>

	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="1">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"  p:order="0"/> 
	<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" /> 

	<context:component-scan base-package="com.naver.hmk" />

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/library?useUnicode=true&amp;characterEncoding=UTF8"/>
        <property name="username" value="libraryid"/>
        <property name="password" value="librarypw"/>
    </bean>
	<!-- 마이바티스를 사용할때 sql세션팩도리와 sql세션이 생성되고 jdbc는 sql세션팩토리가 필요로 한다. -->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- mybatis 세션생성시 사용할 dataSource주입 -->
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:com/naver/hmk/repository/MyBatisConfig.xml"/>        
        <!-- mybatis 세션생성후 쿼리를 실행시킬때 사용할 쿼리위치(메퍼)설정 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:com/naver/hmk/repository/LibraryMepper.xml</value>
            </list>
        </property>
    </bean>
	    <!-- mybatis를 사용하여 db에접속하여 쿼리를 보내는 주체인 SqlSessionTemplate빈 생성-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>


	<!-- connection가진 tx기능을 spring에게 위임 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 트랙잭션 관련 빈을 자동 등록 -->
	<tx:annotation-driven />
</beans>
